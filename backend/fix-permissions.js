// fix-google-permissions.js
// Script pour diagnostiquer et corriger les probl√®mes de permissions Google Sheets

const { google } = require('googleapis');
const { JWT } = require('google-auth-library');

// Configuration du compte de service
const SERVICE_ACCOUNT = {
    type: "service_account",
    project_id: "annuairekaspa",
    private_key_id: "08f6620c50134cf77e781ecd75a0b9aa63bd2311",
    private_key: "-----BEGIN PRIVATE KEY-----\nREMOVED_FOR_SECURITY\n-----END PRIVATE KEY-----\n",
    client_email: "kaspa-ecosystem-service@annuairekaspa.iam.gserviceaccount.com",
    client_id: "106469363499872636088",
    auth_uri: "https://accounts.google.com/o/oauth2/auth",
    token_uri: "https://oauth2.googleapis.com/token",
    auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
    client_x509_cert_url: "https://www.googleapis.com/robot/v1/metadata/x509/kaspa-ecosystem-service%40annuairekaspa.iam.gserviceaccount.com"
};

async function testGooglePermissions() {
    console.log('üîç Test des permissions Google Sheets\n');
    
    try {
        // 1. Cr√©er le client JWT
        console.log('1Ô∏è‚É£ Cr√©ation du client JWT...');
        const auth = new JWT({
            email: SERVICE_ACCOUNT.client_email,
            key: SERVICE_ACCOUNT.private_key,
            scopes: [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
        });

        // 2. Tester l'authentification
        console.log('2Ô∏è‚É£ Test de l\'authentification...');
        await auth.authorize();
        console.log('‚úÖ Authentification r√©ussie\n');

        // 3. Initialiser les services
        console.log('3Ô∏è‚É£ Initialisation des services Google...');
        const sheets = google.sheets({ version: 'v4', auth });
        const drive = google.drive({ version: 'v3', auth });
        console.log('‚úÖ Services initialis√©s\n');

        // 4. Tester l'acc√®s √† Drive
        console.log('4Ô∏è‚É£ Test de l\'acc√®s √† Google Drive...');
        try {
            const driveResponse = await drive.files.list({
                pageSize: 1,
                fields: 'files(id, name)'
            });
            console.log('‚úÖ Acc√®s √† Drive OK');
            console.log(`   Fichiers visibles: ${driveResponse.data.files?.length || 0}\n`);
        } catch (driveError) {
            console.log('‚ùå Erreur d\'acc√®s √† Drive:', driveError.message);
            console.log('   ‚Üí Le compte de service n\'a peut-√™tre pas acc√®s √† Drive\n');
        }

        // 5. Cr√©er un spreadsheet de test
        console.log('5Ô∏è‚É£ Tentative de cr√©ation d\'un spreadsheet...');
        try {
            const createResponse = await sheets.spreadsheets.create({
                requestBody: {
                    properties: {
                        title: `Test Kaspa - ${new Date().toISOString()}`
                    }
                }
            });
            
            const spreadsheetId = createResponse.data.spreadsheetId;
            console.log('‚úÖ Spreadsheet cr√©√© avec succ√®s!');
            console.log(`   ID: ${spreadsheetId}`);
            console.log(`   URL: https://docs.google.com/spreadsheets/d/${spreadsheetId}\n`);

            // 6. Tester l'√©criture
            console.log('6Ô∏è‚É£ Test d\'√©criture dans le spreadsheet...');
            try {
                await sheets.spreadsheets.values.update({
                    spreadsheetId: spreadsheetId,
                    range: 'A1',
                    valueInputOption: 'RAW',
                    requestBody: {
                        values: [['Test r√©ussi!']]
                    }
                });
                console.log('‚úÖ √âcriture r√©ussie!\n');
            } catch (writeError) {
                console.log('‚ùå Erreur d\'√©criture:', writeError.message, '\n');
            }

            // 7. Partager le spreadsheet avec vous
            console.log('7Ô∏è‚É£ Configuration du partage...');
            console.log('‚ö†Ô∏è  IMPORTANT: Pour utiliser ce spreadsheet, vous devez le partager manuellement:');
            console.log(`   1. Ouvrez: https://docs.google.com/spreadsheets/d/${spreadsheetId}`);
            console.log('   2. Cliquez sur "Partager"');
            console.log('   3. Ajoutez votre email personnel');
            console.log('   4. Donnez les permissions "√âditeur"\n');

        } catch (createError) {
            console.log('‚ùå Erreur lors de la cr√©ation:', createError.message);
            console.log('\nüîß SOLUTION POSSIBLE:');
            console.log('1. V√©rifiez que les APIs sont activ√©es dans Google Cloud Console:');
            console.log('   - Google Sheets API');
            console.log('   - Google Drive API');
            console.log('2. URL: https://console.cloud.google.com/apis/library');
            console.log('3. Projet: annuairekaspa\n');
        }

    } catch (error) {
        console.log('‚ùå Erreur g√©n√©rale:', error.message);
        console.log('\nüìã D√©tails de l\'erreur:');
        console.log(error);
    }
}

// Solution alternative : Utiliser un spreadsheet existant
async function useExistingSpreadsheet(spreadsheetId) {
    console.log('üìä Configuration avec un spreadsheet existant\n');
    
    console.log('Instructions:');
    console.log('1. Cr√©ez un nouveau Google Sheets manuellement');
    console.log('2. Partagez-le avec:', SERVICE_ACCOUNT.client_email);
    console.log('3. Donnez les permissions "√âditeur"');
    console.log('4. Copiez l\'ID depuis l\'URL');
    console.log('5. Modifiez kaspa-backend.js pour ajouter cet ID:\n');
    console.log(`   SHEET_ID: '${spreadsheetId || 'VOTRE_ID_ICI'}',\n`);
    
    if (spreadsheetId) {
        try {
            const auth = new JWT({
                email: SERVICE_ACCOUNT.client_email,
                key: SERVICE_ACCOUNT.private_key,
                scopes: ['https://www.googleapis.com/auth/spreadsheets']
            });
            
            const sheets = google.sheets({ version: 'v4', auth });
            
            // Tester l'acc√®s
            const response = await sheets.spreadsheets.get({
                spreadsheetId: spreadsheetId
            });
            
            console.log('‚úÖ Acc√®s au spreadsheet confirm√©!');
            console.log(`   Titre: ${response.data.properties.title}`);
            console.log(`   URL: https://docs.google.com/spreadsheets/d/${spreadsheetId}`);
            
        } catch (error) {
            console.log('‚ùå Impossible d\'acc√©der au spreadsheet');
            console.log('   V√©rifiez que vous l\'avez bien partag√© avec le compte de service');
        }
    }
}

// Menu principal
async function main() {
    console.log('üîß Diagnostic des permissions Google Sheets');
    console.log('==========================================\n');
    
    const args = process.argv.slice(2);
    
    if (args[0] === '--use-existing' && args[1]) {
        await useExistingSpreadsheet(args[1]);
    } else {
        await testGooglePermissions();
        
        console.log('\nüí° OPTIONS DISPONIBLES:');
        console.log('1. Activez les APIs dans Google Cloud Console');
        console.log('2. Utilisez un spreadsheet existant:');
        console.log('   node fix-google-permissions.js --use-existing YOUR_SPREADSHEET_ID');
        console.log('3. Cr√©ez manuellement et partagez avec:', SERVICE_ACCOUNT.client_email);
    }
}

if (require.main === module) {
    main();
}

module.exports = { testGooglePermissions, useExistingSpreadsheet };